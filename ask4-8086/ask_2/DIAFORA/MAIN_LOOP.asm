DEFINE_MAIN_LOOP MACRO
LOCAL FULL_REM_WIN,KEY_RECEIVED
LOCAL FULL_REM_WIN_2,GO_PRINT_RECEIVED
LOCAL SEND_CHECK,FULL_LOC_WIN
LOCAL KEY_PUSHED,FULL_LOC_WIN_2
LOCAL GO_PRINT,GO_ON_SEND
LOCAL SKIP_MAIN_LOOP
JMP SKIP_MAIN_LOOP

MAIN_LOOP PROC NEAR
	CALL RXCH_RS232		;AL<-0 (NUL) means there is nothing to Read 
	CMP AL,0			;else AL<-char received
	JE SEND_CHECK
;[section=CHAR RECEIVED]
	CMP AL,0DH			;check if ENTER received
	JNE KEY_RECEIVED	;if not ENTER jump to KEY_PUSHED
	CMP REMOTE_LIN,22	;Lines can be printed-limit
	JE FULL_REM_WIN
	ADD REMOTE_LIN,1
	MOV REMOTE_COL,0
	JMP SEND_CHECK
FULL_REM_WIN:
	SCROLL_UP_WIN 13 0 22 79 1
	MOV REMOTE_COL,0
	JMP SEND_CHECK
KEY_RECEIVED:
	CMP REMOTE_COL,80	;0-79 column have been written (80 chars)
	JNE GO_PRINT_RECEIVED
	CMP REMOTE_LIN,10	;Lines can be printed-limit
	JE FULL_REM_WIN_2
	ADD REMOTE_LIN,1
	MOV REMOTE_COL,0
	JMP GO_PRINT_RECEIVED
FULL_REM_WIN_2:
	SCROLL_UP_WIN 13 0 22 79 1
	MOV REMOTE_COL,0
GO_PRINT_RECEIVED:
	LOCATE REMOTE_LIN REMOTE_COL 0
	PRINT AL
	ADD REMOTE_COL,1
;[\section]
SEND_CHECK:
	READ_NW				;if ZF=0 there was something to read (in AL)
	JZ MAIN_LOOP		;if ZF=1 loop!
	CMP AL,1BH			;check if ESC
	JE EXODOS
	CMP ECHO_FLG,1
	JNE GO_ON_SEND
;[section=ECHO ON]
	CMP AL,0DH			;check if ENTER
	JNE KEY_PUSHED		;if not ENTER jump to KEY_PUSHED
	CMP LOCAL_LIN,10	;Lines can be printed-limit
    JE FULL_LOC_WIN
    ADD LOCAL_LIN,1
    MOV LOCAL_COL,0
	JMP GO_ON_SEND
FULL_LOC_WIN:
	SCROLL_UP_WIN 1 0 10 79 1
	MOV LOCAL_COL,0
	JMP GO_ON_SEND
KEY_PUSHED:
	CMP LOCAL_COL,80	;0-79 column have been written (80 chars)
	JNE GO_PRINT
	CMP LOCAL_LIN,10	;Lines can be printed-limit
    JE FULL_LOC_WIN_2
    ADD LOCAL_LIN,1
    MOV LOCAL_COL,0
	JMP GO_PRINT
FULL_LOC_WIN_2:
	SCROLL_UP_WIN 1 0 10 79 1
	MOV LOCAL_COL,0
GO_PRINT:
	LOCATE LOCAL_LIN LOCAL_COL 0
	PRINT AL
	ADD LOCAL_COL,1 	
;[\section]
GO_ON_SEND:
	CALL TXCH_RS232
	JMP MAIN_LOOP
	RET				;not necessary, because it's infinite loop(ends with jump to EXODOS)
MAIN_LOOP ENDP 

SKIP_MAIN_LOOP:
	DEFINE_MAIN_LOOP ENDM